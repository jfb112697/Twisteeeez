export const melindas_physical_2x2x2x2_canonical = {
  titletext:
    "Melinda's 2×2×2×2 Physical Hypercube 2D Projection (Canonical Moveset)",
  subtitletext:
    'Code repurposed from <a href="https://2x2x2x2scrambler.github.io/">Grant\'s Physical 2^4 Scrambler</a>',
  controlstext:
    'Controls: <i>(Canonical Moves for Melinda\'s Physical 2^4)</i><br />Lx &nbsp;&nbsp; -> "KeyR"&nbsp;&nbsp;&nbsp;&nbsp; Rx&nbsp;&nbsp;&nbsp; -> "KeyU" <br />Lx\' &nbsp; -> "KeyF"&nbsp;&nbsp;&nbsp;&nbsp; Rx\'&nbsp;&nbsp; -> "KeyJ" <br />Ly &nbsp;&nbsp; -> "KeyE"&nbsp;&nbsp;&nbsp;&nbsp; Ry&nbsp;&nbsp;&nbsp; -> "KeyK" <br />Ly\' &nbsp; -> "KeyD"&nbsp;&nbsp;&nbsp;&nbsp; Ry\'&nbsp;&nbsp; -> "KeyI" <br />Lz &nbsp;&nbsp; -> "KeyW"&nbsp;&nbsp;&nbsp;&nbsp; Rz&nbsp;&nbsp;&nbsp; -> "KeyL" <br />Lz\' &nbsp; -> "KeyS"&nbsp;&nbsp;&nbsp;&nbsp; Rz\'&nbsp;&nbsp; -> "KeyO" <br />Uy2 &nbsp; -> "KeyQ"&nbsp;&nbsp;&nbsp;&nbsp; Dy2&nbsp;&nbsp; -> "KeyP" <br />Ix &nbsp;&nbsp; -> "KeyT"&nbsp;&nbsp;&nbsp;&nbsp; Ix&nbsp;&nbsp;&nbsp; -> "KeyY" <br />Ix\'&nbsp;&nbsp; -> "KeyG"&nbsp;&nbsp;&nbsp;&nbsp; Ix\'&nbsp;&nbsp;&nbsp;-> "KeyH" <br />gyro_z &nbsp;-> "KeyA"&nbsp;&nbsp;&nbsp;&nbsp; gyro_z\'&nbsp;-> "Semicolon"</br>',
  svgversions: [
    '<svg id="cube" viewbox="-5 -5 375 135" width="100%" height="auto" preserveAspectRatio="xMidYMid meet" style="display: block; max-width: 95%; height: auto; padding: 1rem"><polygon id="tri1" points="25.000,50.000 50.000,50.000 25.000,25.000" /><polygon id="tri2" points="25.000,50.000 0.000,50.000 25.000,75.000" /><polygon id="tri3" points="25.000,50.000 50.000,50.000 25.000,75.000" /><polygon id="tri0" points="25.000,50.000 0.000,50.000 25.000,25.000" /><polygon id="tri5" points="50.000,25.000 25.000,25.000 50.000,50.000" /><polygon id="tri4" points="0.000,25.000 25.000,25.000 0.000,50.000" /><polygon id="tri6" points="50.000,75.000 25.000,75.000 50.000,50.000" /><polygon id="tri8" points="75.000,50.000 50.000,50.000 75.000,25.000" /><polygon id="tri7" points="0.000,75.000 25.000,75.000 0.000,50.000" /><polygon id="tri9" points="75.000,50.000 100.000,50.000 75.000,25.000" /><polygon id="tri11" points="75.000,50.000 100.000,50.000 75.000,75.000" /><polygon id="tri10" points="75.000,50.000 50.000,50.000 75.000,75.000" /><polygon id="tri12" points="50.000,25.000 75.000,25.000 50.000,50.000" /><polygon id="tri15" points="50.000,75.000 75.000,75.000 50.000,50.000" /><polygon id="tri13" points="100.000,25.000 75.000,25.000 100.000,50.000" /><polygon id="tri17" points="75.000,100.000 100.000,100.000 75.000,75.000" /><polygon id="tri14" points="100.000,75.000 75.000,75.000 100.000,50.000" /><polygon id="tri18" points="75.000,100.000 50.000,100.000 75.000,125.000" /><polygon id="tri19" points="75.000,100.000 100.000,100.000 75.000,125.000" /><polygon id="tri16" points="75.000,100.000 50.000,100.000 75.000,75.000" /><polygon id="tri21" points="100.000,75.000 75.000,75.000 100.000,100.000" /><polygon id="tri22" points="100.000,125.000 75.000,125.000 100.000,100.000" /><polygon id="tri23" points="50.000,125.000 75.000,125.000 50.000,100.000" /><polygon id="tri24" points="150.000,25.000 125.000,25.000 150.000,0.000" /><polygon id="tri20" points="50.000,75.000 75.000,75.000 50.000,100.000" /><polygon id="tri25" points="150.000,25.000 175.000,25.000 150.000,0.000" /><polygon id="tri26" points="150.000,25.000 125.000,25.000 150.000,50.000" /><polygon id="tri29" points="175.000,0.000 150.000,0.000 175.000,25.000" /><polygon id="tri30" points="175.000,50.000 150.000,50.000 175.000,25.000" /><polygon id="tri31" points="125.000,50.000 150.000,50.000 125.000,25.000" /><polygon id="tri27" points="150.000,25.000 175.000,25.000 150.000,50.000" /><polygon id="tri35" points="87.500,12.500 112.500,12.500 75.000,25.000" /><polygon id="tri28" points="125.000,0.000 150.000,0.000 125.000,25.000" /><polygon id="tri33" points="87.500,12.500 112.500,12.500 100.000,0.000" /><polygon id="tri32" points="87.500,12.500 62.500,12.500 100.000,0.000" /><polygon id="tri37" points="125.000,0.000 100.000,0.000 112.500,12.500" /><polygon id="tri36" points="75.000,0.000 100.000,0.000 62.500,12.500" /><polygon id="tri34" points="87.500,12.500 62.500,12.500 75.000,25.000" /><polygon id="tri39" points="50.000,25.000 75.000,25.000 62.500,12.500" /><polygon id="tri41" points="112.500,37.500 125.000,25.000 112.500,12.500" /><polygon id="tri40" points="112.500,37.500 100.000,50.000 112.500,12.500" /><polygon id="tri43" points="112.500,37.500 125.000,25.000 112.500,62.500" /><polygon id="tri38" points="100.000,25.000 75.000,25.000 112.500,12.500" /><polygon id="tri42" points="112.500,37.500 100.000,50.000 112.500,62.500" /><polygon id="tri44" points="100.000,25.000 112.500,12.500 100.000,50.000" /><polygon id="tri46" points="125.000,50.000 112.500,62.500 125.000,25.000" /><polygon id="tri45" points="125.000,0.000 112.500,12.500 125.000,25.000" /><polygon id="tri47" points="100.000,75.000 112.500,62.500 100.000,50.000" /><polygon id="tri50" points="200.000,25.000 175.000,25.000 200.000,50.000" /><polygon id="tri49" points="200.000,25.000 225.000,25.000 200.000,0.000" /><polygon id="tri51" points="200.000,25.000 225.000,25.000 200.000,50.000" /><polygon id="tri52" points="175.000,0.000 200.000,0.000 175.000,25.000" /><polygon id="tri48" points="200.000,25.000 175.000,25.000 200.000,0.000" /><polygon id="tri57" points="275.000,50.000 300.000,50.000 275.000,25.000" /><polygon id="tri55" points="175.000,50.000 200.000,50.000 175.000,25.000" /><polygon id="tri56" points="275.000,50.000 250.000,50.000 275.000,25.000" /><polygon id="tri54" points="225.000,50.000 200.000,50.000 225.000,25.000" /><polygon id="tri58" points="275.000,50.000 250.000,50.000 275.000,75.000" /><polygon id="tri60" points="250.000,25.000 275.000,25.000 250.000,50.000" /><polygon id="tri59" points="275.000,50.000 300.000,50.000 275.000,75.000" /><polygon id="tri62" points="300.000,75.000 275.000,75.000 300.000,50.000" /><polygon id="tri63" points="250.000,75.000 275.000,75.000 250.000,50.000" /><polygon id="tri64" points="275.000,100.000 250.000,100.000 275.000,75.000" /><polygon id="tri53" points="225.000,0.000 200.000,0.000 225.000,25.000" /><polygon id="tri66" points="275.000,100.000 250.000,100.000 275.000,125.000" /><polygon id="tri65" points="275.000,100.000 300.000,100.000 275.000,75.000" /><polygon id="tri67" points="275.000,100.000 300.000,100.000 275.000,125.000" /><polygon id="tri68" points="250.000,75.000 275.000,75.000 250.000,100.000" /><polygon id="tri70" points="300.000,125.000 275.000,125.000 300.000,100.000" /><polygon id="tri61" points="300.000,25.000 275.000,25.000 300.000,50.000" /><polygon id="tri69" points="300.000,75.000 275.000,75.000 300.000,100.000" /><polygon id="tri71" points="250.000,125.000 275.000,125.000 250.000,100.000" /><polygon id="tri74" points="325.000,50.000 300.000,50.000 325.000,75.000" /><polygon id="tri73" points="325.000,50.000 350.000,50.000 325.000,25.000" /><polygon id="tri72" points="325.000,50.000 300.000,50.000 325.000,25.000" /><polygon id="tri76" points="300.000,25.000 325.000,25.000 300.000,50.000" /><polygon id="tri75" points="325.000,50.000 350.000,50.000 325.000,75.000" /><polygon id="tri77" points="350.000,25.000 325.000,25.000 350.000,50.000" /><polygon id="tri80" points="237.500,37.500 225.000,25.000 237.500,12.500" /><polygon id="tri79" points="300.000,75.000 325.000,75.000 300.000,50.000" /><polygon id="tri81" points="237.500,37.500 250.000,50.000 237.500,12.500" /><polygon id="tri83" points="237.500,37.500 250.000,50.000 237.500,62.500" /><polygon id="tri82" points="237.500,37.500 225.000,25.000 237.500,62.500" /><polygon id="tri84" points="225.000,0.000 237.500,12.500 225.000,25.000" /><polygon id="tri78" points="350.000,75.000 325.000,75.000 350.000,50.000" /><polygon id="tri87" points="225.000,50.000 237.500,62.500 225.000,25.000" /><polygon id="tri85" points="250.000,25.000 237.500,12.500 250.000,50.000" /><polygon id="tri90" points="262.500,12.500 237.500,12.500 275.000,25.000" /><polygon id="tri88" points="262.500,12.500 237.500,12.500 250.000,0.000" /><polygon id="tri86" points="250.000,75.000 237.500,62.500 250.000,50.000" /><polygon id="tri91" points="262.500,12.500 287.500,12.500 275.000,25.000" /><polygon id="tri93" points="275.000,0.000 250.000,0.000 287.500,12.500" /><polygon id="tri89" points="262.500,12.500 287.500,12.500 250.000,0.000" /><polygon id="tri95" points="250.000,25.000 275.000,25.000 237.500,12.500" /><polygon id="tri94" points="300.000,25.000 275.000,25.000 287.500,12.500" /><polygon id="tri92" points="225.000,0.000 250.000,0.000 237.500,12.500" /></svg>',
  ],
  linkedtris: [
    ["tri0", "tri1", "tri2", "tri3", "tri72", "tri73", "tri74", "tri75"],
    ["tri8", "tri9", "tri10", "tri11", "tri56", "tri57", "tri58", "tri59"],
    ["tri16", "tri17", "tri18", "tri19", "tri64", "tri65", "tri66", "tri67"],
    ["tri24", "tri25", "tri26", "tri27", "tri48", "tri49", "tri50", "tri51"],
    ["tri32", "tri33", "tri34", "tri35", "tri88", "tri89", "tri90", "tri91"],
    ["tri40", "tri41", "tri42", "tri43", "tri80", "tri81", "tri82", "tri83"],
    ["tri4", "tri5", "tri6", "tri7", "tri44", "tri45", "tri46", "tri47"],
    ["tri52", "tri53", "tri54", "tri55", "tri76", "tri77", "tri78", "tri79"],
  ],
  cubies: [
    [8, 1, 5, 12, 34, 39],
    [9, 13, 38, 44, 35, 40],
    [10, 3, 15, 6, 20, 16],
    [11, 14, 47, 21, 17, 42],
    [24, 28, 45, 37, 33, 41],
    [25, 0, 29, 36, 4, 32],
    [26, 19, 31, 46, 22, 43],
    [27, 2, 18, 30, 7, 23],

    [56, 60, 85, 95, 81, 90],
    [57, 61, 76, 94, 72, 91],
    [58, 63, 68, 86, 64, 83],
    [59, 62, 69, 79, 65, 74],
    [48, 52, 93, 77, 73, 89],
    [49, 53, 84, 92, 80, 88],
    [50, 55, 78, 70, 67, 75],
    [51, 54, 87, 71, 66, 82],
  ],
  colors: [
    "orange",
    "red",
    "yellow",
    "linen",
    "rebeccapurple",
    "fuchsia",
    "limegreen",
    "dodgerblue",
  ],
  puzzleState: [
    [
      [0, 7, 2, 5],
      [0, 7, 2, 4],
      [0, 7, 3, 4],
      [0, 7, 3, 5],
      [0, 6, 2, 5],
      [0, 6, 2, 4],
      [0, 6, 3, 4],
      [0, 6, 3, 5],
    ],
    [
      [1, 7, 2, 4],
      [1, 7, 2, 5],
      [1, 7, 3, 5],
      [1, 7, 3, 4],
      [1, 6, 2, 4],
      [1, 6, 2, 5],
      [1, 6, 3, 5],
      [1, 6, 3, 4],
    ],
  ],
  keys: [
    // Canonical Moves for Melinda's Physical 2^4 Hypercube:
    "KeyR", // Lx
    "KeyF", // Lx'
    "KeyE", // Ly
    "KeyD", // Ly'
    "KeyW", // Lz
    "KeyS", // Lz'
    "KeyU", // Rx
    "KeyJ", // Rx'
    "KeyK", // Ry
    "KeyI", // Ry'
    "KeyL", // Rz
    "KeyO", // Rz'
    "KeyQ", // Uy2
    "KeyP", // Dy2
    "KeyT", // Ix
    "KeyY", // Ix
    "KeyG", // Ix'
    "KeyH", // Ix'
    "KeyA", // gyro
    "Semicolon", // gyro'
  ],
  move: {
    Lx: function (p) {
      return [
        [
          [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
          [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
          [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
          [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
          [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
          [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
          [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
          [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
        ],
        p[1],
      ];
    },
    Ly: function (p) {
      return [
        [
          [p[0][3][0], p[0][3][1], p[0][3][3], p[0][3][2]],
          [p[0][0][0], p[0][0][1], p[0][0][3], p[0][0][2]],
          [p[0][1][0], p[0][1][1], p[0][1][3], p[0][1][2]],
          [p[0][2][0], p[0][2][1], p[0][2][3], p[0][2][2]],
          [p[0][7][0], p[0][7][1], p[0][7][3], p[0][7][2]],
          [p[0][4][0], p[0][4][1], p[0][4][3], p[0][4][2]],
          [p[0][5][0], p[0][5][1], p[0][5][3], p[0][5][2]],
          [p[0][6][0], p[0][6][1], p[0][6][3], p[0][6][2]],
        ],
        p[1],
      ];
    },
    Lz: function (p) {
      return [
        [
          [p[0][4][0], p[0][4][3], p[0][4][2], p[0][4][1]],
          [p[0][0][0], p[0][0][3], p[0][0][2], p[0][0][1]],
          [p[0][3][0], p[0][3][3], p[0][3][2], p[0][3][1]],
          [p[0][7][0], p[0][7][3], p[0][7][2], p[0][7][1]],
          [p[0][5][0], p[0][5][3], p[0][5][2], p[0][5][1]],
          [p[0][1][0], p[0][1][3], p[0][1][2], p[0][1][1]],
          [p[0][2][0], p[0][2][3], p[0][2][2], p[0][2][1]],
          [p[0][6][0], p[0][6][3], p[0][6][2], p[0][6][1]],
        ],
        p[1],
      ];
    },
    Rx: function (p) {
      return [
        p[0],
        [
          [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
          [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
          [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
          [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
          [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
          [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
          [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
          [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
        ],
      ];
    },
    Ry: function (p) {
      return [
        p[0],
        [
          [p[1][3][0], p[1][3][1], p[1][3][3], p[1][3][2]],
          [p[1][0][0], p[1][0][1], p[1][0][3], p[1][0][2]],
          [p[1][1][0], p[1][1][1], p[1][1][3], p[1][1][2]],
          [p[1][2][0], p[1][2][1], p[1][2][3], p[1][2][2]],
          [p[1][7][0], p[1][7][1], p[1][7][3], p[1][7][2]],
          [p[1][4][0], p[1][4][1], p[1][4][3], p[1][4][2]],
          [p[1][5][0], p[1][5][1], p[1][5][3], p[1][5][2]],
          [p[1][6][0], p[1][6][1], p[1][6][3], p[1][6][2]],
        ],
      ];
    },
    Rz: function (p) {
      return [
        p[0],
        [
          [p[1][4][0], p[1][4][3], p[1][4][2], p[1][4][1]],
          [p[1][0][0], p[1][0][3], p[1][0][2], p[1][0][1]],
          [p[1][3][0], p[1][3][3], p[1][3][2], p[1][3][1]],
          [p[1][7][0], p[1][7][3], p[1][7][2], p[1][7][1]],
          [p[1][5][0], p[1][5][3], p[1][5][2], p[1][5][1]],
          [p[1][1][0], p[1][1][3], p[1][1][2], p[1][1][1]],
          [p[1][2][0], p[1][2][3], p[1][2][2], p[1][2][1]],
          [p[1][6][0], p[1][6][3], p[1][6][2], p[1][6][1]],
        ],
      ];
    },
    Ux: function (p) {
      return [
        [
          [p[0][3][0], p[0][3][1], p[0][3][3], p[0][3][2]],
          [p[0][0][0], p[0][0][1], p[0][0][3], p[0][0][2]],
          [p[0][1][0], p[0][1][1], p[0][1][3], p[0][1][2]],
          [p[0][2][0], p[0][2][1], p[0][2][3], p[0][2][2]],
          p[0][4],
          p[0][5],
          p[0][6],
          p[0][7],
        ],
        [
          [p[1][1][0], p[1][1][1], p[1][1][3], p[1][1][2]],
          [p[1][2][0], p[1][2][1], p[1][2][3], p[1][2][2]],
          [p[1][3][0], p[1][3][1], p[1][3][3], p[1][3][2]],
          [p[1][0][0], p[1][0][1], p[1][0][3], p[1][0][2]],
          p[1][4],
          p[1][5],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    Uy: function (p) {
      return [
        [
          p[0][2],
          p[0][3],
          p[1][2],
          p[1][3],
          p[0][4],
          p[0][5],
          p[0][6],
          p[0][7],
        ],
        [
          p[0][0],
          p[0][1],
          p[1][0],
          p[1][1],
          p[1][4],
          p[1][5],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    Uz: function (p) {
      return [
        [
          [p[0][1][3], p[0][1][1], p[0][1][2], p[0][1][0]],
          [p[1][0][3], p[1][0][1], p[1][0][2], p[1][0][0]],
          [p[1][3][3], p[1][3][1], p[1][3][2], p[1][3][0]],
          [p[0][2][3], p[0][2][1], p[0][2][2], p[0][2][0]],
          p[0][4],
          p[0][5],
          p[0][6],
          p[0][7],
        ],
        [
          [p[1][1][3], p[1][1][1], p[1][1][2], p[1][1][0]],
          [p[0][0][3], p[0][0][1], p[0][0][2], p[0][0][0]],
          [p[0][3][3], p[0][3][1], p[0][3][2], p[0][3][0]],
          [p[1][2][3], p[1][2][1], p[1][2][2], p[1][2][0]],
          p[1][4],
          p[1][5],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    Dx: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          p[0][2],
          p[0][3],
          [p[0][7][0], p[0][7][1], p[0][7][3], p[0][7][2]],
          [p[0][4][0], p[0][4][1], p[0][4][3], p[0][4][2]],
          [p[0][5][0], p[0][5][1], p[0][5][3], p[0][5][2]],
          [p[0][6][0], p[0][6][1], p[0][6][3], p[0][6][2]],
        ],
        [
          p[1][0],
          p[1][1],
          p[1][2],
          p[1][3],
          [p[1][5][0], p[1][5][1], p[1][5][3], p[1][5][2]],
          [p[1][6][0], p[1][6][1], p[1][6][3], p[1][6][2]],
          [p[1][7][0], p[1][7][1], p[1][7][3], p[1][7][2]],
          [p[1][4][0], p[1][4][1], p[1][4][3], p[1][4][2]],
        ],
      ];
    },
    Dy: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          p[0][2],
          p[0][3],
          p[0][6],
          p[0][7],
          p[1][6],
          p[1][7],
        ],
        [
          p[1][0],
          p[1][1],
          p[1][2],
          p[1][3],
          p[0][4],
          p[0][5],
          p[1][4],
          p[1][5],
        ],
      ];
    },
    Dz: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          p[0][2],
          p[0][3],
          [p[0][5][3], p[0][5][1], p[0][5][2], p[0][5][0]],
          [p[1][4][3], p[1][4][1], p[1][4][2], p[1][4][0]],
          [p[1][7][3], p[1][7][1], p[1][7][2], p[1][7][0]],
          [p[0][6][3], p[0][6][1], p[0][6][2], p[0][6][0]],
        ],
        [
          p[1][0],
          p[1][1],
          p[1][2],
          p[1][3],
          [p[1][5][3], p[1][5][1], p[1][5][2], p[1][5][0]],
          [p[0][4][3], p[0][4][1], p[0][4][2], p[0][4][0]],
          [p[0][7][3], p[0][7][1], p[0][7][2], p[0][7][0]],
          [p[1][6][3], p[1][6][1], p[1][6][2], p[1][6][0]],
        ],
      ];
    },
    Fx: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          [p[0][3][0], p[0][3][3], p[0][3][2], p[0][3][1]],
          [p[0][7][0], p[0][7][3], p[0][7][2], p[0][7][1]],
          p[0][4],
          p[0][5],
          [p[0][2][0], p[0][2][3], p[0][2][2], p[0][2][1]],
          [p[0][6][0], p[0][6][3], p[0][6][2], p[0][6][1]],
        ],
        [
          p[1][0],
          p[1][1],
          [p[1][6][0], p[1][6][3], p[1][6][2], p[1][6][1]],
          [p[1][2][0], p[1][2][3], p[1][2][2], p[1][2][1]],
          p[1][4],
          p[1][5],
          [p[1][7][0], p[1][7][3], p[1][7][2], p[1][7][1]],
          [p[1][3][0], p[1][3][3], p[1][3][2], p[1][3][1]],
        ],
      ];
    },
    Fy: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          p[0][7],
          p[0][6],
          p[0][4],
          p[0][5],
          p[1][6],
          p[1][7],
        ],
        [
          p[1][0],
          p[1][1],
          p[0][2],
          p[0][3],
          p[1][4],
          p[1][5],
          p[1][3],
          p[1][2],
        ],
      ];
    },
    Fz: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          [p[1][3][3], p[1][3][1], p[1][3][2], p[1][3][0]],
          [p[0][2][3], p[0][2][1], p[0][2][2], p[0][2][0]],
          p[0][4],
          p[0][5],
          [p[1][7][3], p[1][7][1], p[1][7][2], p[1][7][0]],
          [p[0][6][3], p[0][6][1], p[0][6][2], p[0][6][0]],
        ],
        [
          p[1][0],
          p[1][1],
          [p[0][3][3], p[0][3][1], p[0][3][2], p[0][3][0]],
          [p[1][2][3], p[1][2][1], p[1][2][2], p[1][2][0]],
          p[1][4],
          p[1][5],
          [p[0][7][3], p[0][7][1], p[0][7][2], p[0][7][0]],
          [p[1][6][3], p[1][6][1], p[1][6][2], p[1][6][0]],
        ],
      ];
    },
    Bx: function (p) {
      return [
        [
          [p[0][1][0], p[0][1][3], p[0][1][2], p[0][1][1]],
          [p[0][5][0], p[0][5][3], p[0][5][2], p[0][5][1]],
          p[0][2],
          p[0][3],
          [p[0][0][0], p[0][0][3], p[0][0][2], p[0][0][1]],
          [p[0][4][0], p[0][4][3], p[0][4][2], p[0][4][1]],
          p[0][6],
          p[0][7],
        ],
        [
          [p[1][4][0], p[1][4][3], p[1][4][2], p[1][4][1]],
          [p[1][0][0], p[1][0][3], p[1][0][2], p[1][0][1]],
          p[1][2],
          p[1][3],
          [p[1][5][0], p[1][5][3], p[1][5][2], p[1][5][1]],
          [p[1][1][0], p[1][1][3], p[1][1][2], p[1][1][1]],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    By: function (p) {
      return [
        [
          p[1][0],
          p[1][1],
          p[0][2],
          p[0][3],
          p[0][1],
          p[0][0],
          p[0][6],
          p[0][7],
        ],
        [
          p[1][5],
          p[1][4],
          p[1][2],
          p[1][3],
          p[0][4],
          p[0][5],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    Bz: function (p) {
      return [
        [
          [p[0][1][3], p[0][1][1], p[0][1][2], p[0][1][0]],
          [p[1][0][3], p[1][0][1], p[1][0][2], p[1][0][0]],
          p[0][2],
          p[0][3],
          [p[0][5][3], p[0][5][1], p[0][5][2], p[0][5][0]],
          [p[1][4][3], p[1][4][1], p[1][4][2], p[1][4][0]],
          p[0][6],
          p[0][7],
        ],
        [
          [p[1][1][3], p[1][1][1], p[1][1][2], p[1][1][0]],
          [p[0][0][3], p[0][0][1], p[0][0][2], p[0][0][0]],
          p[1][2],
          p[1][3],
          [p[1][5][3], p[1][5][1], p[1][5][2], p[1][5][0]],
          [p[0][4][3], p[0][4][1], p[0][4][2], p[0][4][0]],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    Ix: function (p) {
      return [
        [
          p[0][0],
          [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
          [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
          p[0][3],
          p[0][4],
          [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
          [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
          p[0][7],
        ],
        [
          [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
          p[1][1],
          p[1][2],
          [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
          [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
          p[1][5],
          p[1][6],
          [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
        ],
      ];
    },
    Iy: function (p) {
      return [
        [
          p[0][0],
          [p[0][2][2], p[0][2][1], p[0][2][0], p[0][2][3]],
          [p[1][3][2], p[1][3][1], p[1][3][0], p[1][3][3]],
          p[0][3],
          p[0][4],
          [p[0][6][2], p[0][6][1], p[0][6][0], p[0][6][3]],
          [p[1][7][2], p[1][7][1], p[1][7][0], p[1][7][3]],
          p[0][7],
        ],
        [
          [p[0][1][2], p[0][1][1], p[0][1][0], p[0][1][3]],
          p[1][1],
          p[1][2],
          [p[1][0][2], p[1][0][1], p[1][0][0], p[1][0][3]],
          [p[0][5][2], p[0][5][1], p[0][5][0], p[0][5][3]],
          p[1][5],
          p[1][6],
          [p[1][4][2], p[1][4][1], p[1][4][0], p[1][4][3]],
        ],
      ];
    },
    Iz: function (p) {
      return [
        [
          p[0][0],
          [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
          [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]],
          p[0][3],
          p[0][4],
          [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
          [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
          p[0][7],
        ],
        [
          [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
          p[1][1],
          p[1][2],
          [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
          [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
          p[1][5],
          p[1][6],
          [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]],
        ],
      ];
    },
    Ox: function (p) {
      return [
        [
          [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
          p[0][1],
          p[0][2],
          [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
          [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
          p[0][5],
          p[0][6],
          [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
        ],
        [
          p[1][0],
          [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
          [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
          p[1][3],
          p[1][4],
          [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
          [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
          p[1][7],
        ],
      ];
    },
    Oy: function (p) {
      return [
        [
          [p[0][3][2], p[0][3][1], p[0][3][0], p[0][3][3]],
          p[0][1],
          p[0][2],
          [p[1][2][2], p[1][2][1], p[1][2][0], p[1][2][3]],
          [p[0][7][2], p[0][7][1], p[0][7][0], p[0][7][3]],
          p[0][5],
          p[0][6],
          [p[1][6][2], p[1][6][1], p[1][6][0], p[1][6][3]],
        ],
        [
          p[1][0],
          [p[0][0][2], p[0][0][1], p[0][0][0], p[0][0][3]],
          [p[1][1][2], p[1][1][1], p[1][1][0], p[1][1][3]],
          p[1][3],
          p[1][4],
          [p[0][4][2], p[0][4][1], p[0][4][0], p[0][4][3]],
          [p[1][5][2], p[1][5][1], p[1][5][0], p[1][5][3]],
          p[1][7],
        ],
      ];
    },
    Oz: function (p) {
      return [
        [
          [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
          p[0][1],
          p[0][2],
          [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
          [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
          p[0][5],
          p[0][6],
          [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]],
        ],
        [
          p[1][0],
          [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
          [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]],
          p[1][3],
          p[1][4],
          [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
          [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
          p[1][7],
        ],
      ];
    },
    Lx_prime: function (p) {
      return [
        [
          [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
          [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
          [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
          [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
          [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
          [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
          [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
          [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
        ],
        p[1],
      ];
    },
    Ly_prime: function (p) {
      return [
        [
          [p[0][1][0], p[0][1][1], p[0][1][3], p[0][1][2]],
          [p[0][2][0], p[0][2][1], p[0][2][3], p[0][2][2]],
          [p[0][3][0], p[0][3][1], p[0][3][3], p[0][3][2]],
          [p[0][0][0], p[0][0][1], p[0][0][3], p[0][0][2]],
          [p[0][5][0], p[0][5][1], p[0][5][3], p[0][5][2]],
          [p[0][6][0], p[0][6][1], p[0][6][3], p[0][6][2]],
          [p[0][7][0], p[0][7][1], p[0][7][3], p[0][7][2]],
          [p[0][4][0], p[0][4][1], p[0][4][3], p[0][4][2]],
        ],
        p[1],
      ];
    },
    Lz_prime: function (p) {
      return [
        [
          [p[0][1][0], p[0][1][3], p[0][1][2], p[0][1][1]],
          [p[0][5][0], p[0][5][3], p[0][5][2], p[0][5][1]],
          [p[0][6][0], p[0][6][3], p[0][6][2], p[0][6][1]],
          [p[0][2][0], p[0][2][3], p[0][2][2], p[0][2][1]],
          [p[0][0][0], p[0][0][3], p[0][0][2], p[0][0][1]],
          [p[0][4][0], p[0][4][3], p[0][4][2], p[0][4][1]],
          [p[0][7][0], p[0][7][3], p[0][7][2], p[0][7][1]],
          [p[0][3][0], p[0][3][3], p[0][3][2], p[0][3][1]],
        ],
        p[1],
      ];
    },
    Rx_prime: function (p) {
      return [
        p[0],
        [
          [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
          [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
          [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
          [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
          [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
          [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
          [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
          [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
        ],
      ];
    },
    Ry_prime: function (p) {
      return [
        p[0],
        [
          [p[1][1][0], p[1][1][1], p[1][1][3], p[1][1][2]],
          [p[1][2][0], p[1][2][1], p[1][2][3], p[1][2][2]],
          [p[1][3][0], p[1][3][1], p[1][3][3], p[1][3][2]],
          [p[1][0][0], p[1][0][1], p[1][0][3], p[1][0][2]],
          [p[1][5][0], p[1][5][1], p[1][5][3], p[1][5][2]],
          [p[1][6][0], p[1][6][1], p[1][6][3], p[1][6][2]],
          [p[1][7][0], p[1][7][1], p[1][7][3], p[1][7][2]],
          [p[1][4][0], p[1][4][1], p[1][4][3], p[1][4][2]],
        ],
      ];
    },
    Rz_prime: function (p) {
      return [
        p[0],
        [
          [p[1][1][0], p[1][1][3], p[1][1][2], p[1][1][1]],
          [p[1][5][0], p[1][5][3], p[1][5][2], p[1][5][1]],
          [p[1][6][0], p[1][6][3], p[1][6][2], p[1][6][1]],
          [p[1][2][0], p[1][2][3], p[1][2][2], p[1][2][1]],
          [p[1][0][0], p[1][0][3], p[1][0][2], p[1][0][1]],
          [p[1][4][0], p[1][4][3], p[1][4][2], p[1][4][1]],
          [p[1][7][0], p[1][7][3], p[1][7][2], p[1][7][1]],
          [p[1][3][0], p[1][3][3], p[1][3][2], p[1][3][1]],
        ],
      ];
    },
    Ux_prime: function (p) {
      return [
        [
          [p[0][1][0], p[0][1][1], p[0][1][3], p[0][1][2]],
          [p[0][2][0], p[0][2][1], p[0][2][3], p[0][2][2]],
          [p[0][3][0], p[0][3][1], p[0][3][3], p[0][3][2]],
          [p[0][0][0], p[0][0][1], p[0][0][3], p[0][0][2]],
          p[0][4],
          p[0][5],
          p[0][6],
          p[0][7],
        ],
        [
          [p[1][3][0], p[1][3][1], p[1][3][3], p[1][3][2]],
          [p[1][0][0], p[1][0][1], p[1][0][3], p[1][0][2]],
          [p[1][1][0], p[1][1][1], p[1][1][3], p[1][1][2]],
          [p[1][2][0], p[1][2][1], p[1][2][3], p[1][2][2]],
          p[1][4],
          p[1][5],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    Uy_prime: function (p) {
      return [
        [
          p[1][0],
          p[1][1],
          p[0][0],
          p[0][1],
          p[0][4],
          p[0][5],
          p[0][6],
          p[0][7],
        ],
        [
          p[1][2],
          p[1][3],
          p[0][2],
          p[0][3],
          p[1][4],
          p[1][5],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    Uz_prime: function (p) {
      return [
        [
          [p[1][1][3], p[1][1][1], p[1][1][2], p[1][1][0]],
          [p[0][0][3], p[0][0][1], p[0][0][2], p[0][0][0]],
          [p[0][3][3], p[0][3][1], p[0][3][2], p[0][3][0]],
          [p[1][2][3], p[1][2][1], p[1][2][2], p[1][2][0]],
          p[0][4],
          p[0][5],
          p[0][6],
          p[0][7],
        ],
        [
          [p[0][1][3], p[0][1][1], p[0][1][2], p[0][1][0]],
          [p[1][0][3], p[1][0][1], p[1][0][2], p[1][0][0]],
          [p[1][3][3], p[1][3][1], p[1][3][2], p[1][3][0]],
          [p[0][2][3], p[0][2][1], p[0][2][2], p[0][2][0]],
          p[1][4],
          p[1][5],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    Dx_prime: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          p[0][2],
          p[0][3],
          [p[0][5][0], p[0][5][1], p[0][5][3], p[0][5][2]],
          [p[0][6][0], p[0][6][1], p[0][6][3], p[0][6][2]],
          [p[0][7][0], p[0][7][1], p[0][7][3], p[0][7][2]],
          [p[0][4][0], p[0][4][1], p[0][4][3], p[0][4][2]],
        ],
        [
          p[1][0],
          p[1][1],
          p[1][2],
          p[1][3],
          [p[1][7][0], p[1][7][1], p[1][7][3], p[1][7][2]],
          [p[1][4][0], p[1][4][1], p[1][4][3], p[1][4][2]],
          [p[1][5][0], p[1][5][1], p[1][5][3], p[1][5][2]],
          [p[1][6][0], p[1][6][1], p[1][6][3], p[1][6][2]],
        ],
      ];
    },
    Dy_prime: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          p[0][2],
          p[0][3],
          p[1][4],
          p[1][5],
          p[0][4],
          p[0][5],
        ],
        [
          p[1][0],
          p[1][1],
          p[1][2],
          p[1][3],
          p[1][6],
          p[1][7],
          p[0][6],
          p[0][7],
        ],
      ];
    },
    Dz_prime: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          p[0][2],
          p[0][3],
          [p[1][5][3], p[1][5][1], p[1][5][2], p[1][5][0]],
          [p[0][4][3], p[0][4][1], p[0][4][2], p[0][4][0]],
          [p[0][7][3], p[0][7][1], p[0][7][2], p[0][7][0]],
          [p[1][6][3], p[1][6][1], p[1][6][2], p[1][6][0]],
        ],
        [
          p[1][0],
          p[1][1],
          p[1][2],
          p[1][3],
          [p[0][5][3], p[0][5][1], p[0][5][2], p[0][5][0]],
          [p[1][4][3], p[1][4][1], p[1][4][2], p[1][4][0]],
          [p[1][7][3], p[1][7][1], p[1][7][2], p[1][7][0]],
          [p[0][6][3], p[0][6][1], p[0][6][2], p[0][6][0]],
        ],
      ];
    },
    Fx_prime: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          [p[0][6][0], p[0][6][3], p[0][6][2], p[0][6][1]],
          [p[0][2][0], p[0][2][3], p[0][2][2], p[0][2][1]],
          p[0][4],
          p[0][5],
          [p[0][7][0], p[0][7][3], p[0][7][2], p[0][7][1]],
          [p[0][3][0], p[0][3][3], p[0][3][2], p[0][3][1]],
        ],
        [
          p[1][0],
          p[1][1],
          [p[1][3][0], p[1][3][3], p[1][3][2], p[1][3][1]],
          [p[1][7][0], p[1][7][3], p[1][7][2], p[1][7][1]],
          p[1][4],
          p[1][5],
          [p[1][2][0], p[1][2][3], p[1][2][2], p[1][2][1]],
          [p[1][6][0], p[1][6][3], p[1][6][2], p[1][6][1]],
        ],
      ];
    },
    Fy_prime: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          p[1][2],
          p[1][3],
          p[0][4],
          p[0][5],
          p[0][3],
          p[0][2],
        ],
        [
          p[1][0],
          p[1][1],
          p[1][7],
          p[1][6],
          p[1][4],
          p[1][5],
          p[0][6],
          p[0][7],
        ],
      ];
    },
    Fz_prime: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          [p[0][3][3], p[0][3][1], p[0][3][2], p[0][3][0]],
          [p[1][2][3], p[1][2][1], p[1][2][2], p[1][2][0]],
          p[0][4],
          p[0][5],
          [p[0][7][3], p[0][7][1], p[0][7][2], p[0][7][0]],
          [p[1][6][3], p[1][6][1], p[1][6][2], p[1][6][0]],
        ],
        [
          p[1][0],
          p[1][1],
          [p[1][3][3], p[1][3][1], p[1][3][2], p[1][3][0]],
          [p[0][2][3], p[0][2][1], p[0][2][2], p[0][2][0]],
          p[1][4],
          p[1][5],
          [p[1][7][3], p[1][7][1], p[1][7][2], p[1][7][0]],
          [p[0][6][3], p[0][6][1], p[0][6][2], p[0][6][0]],
        ],
      ];
    },
    Bx_prime: function (p) {
      return [
        [
          [p[0][4][0], p[0][4][3], p[0][4][2], p[0][4][1]],
          [p[0][0][0], p[0][0][3], p[0][0][2], p[0][0][1]],
          p[0][2],
          p[0][3],
          [p[0][5][0], p[0][5][3], p[0][5][2], p[0][5][1]],
          [p[0][1][0], p[0][1][3], p[0][1][2], p[0][1][1]],
          p[0][6],
          p[0][7],
        ],
        [
          [p[1][1][0], p[1][1][3], p[1][1][2], p[1][1][1]],
          [p[1][5][0], p[1][5][3], p[1][5][2], p[1][5][1]],
          p[1][2],
          p[1][3],
          [p[1][0][0], p[1][0][3], p[1][0][2], p[1][0][1]],
          [p[1][4][0], p[1][4][3], p[1][4][2], p[1][4][1]],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    By_prime: function (p) {
      return [
        [
          p[0][5],
          p[0][4],
          p[0][2],
          p[0][3],
          p[1][4],
          p[1][5],
          p[0][6],
          p[0][7],
        ],
        [
          p[0][0],
          p[0][1],
          p[1][2],
          p[1][3],
          p[1][1],
          p[1][0],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    Bz_prime: function (p) {
      return [
        [
          [p[1][1][3], p[1][1][1], p[1][1][2], p[1][1][0]],
          [p[0][0][3], p[0][0][1], p[0][0][2], p[0][0][0]],
          p[0][2],
          p[0][3],
          [p[1][5][3], p[1][5][1], p[1][5][2], p[1][5][0]],
          [p[0][4][3], p[0][4][1], p[0][4][2], p[0][4][0]],
          p[0][6],
          p[0][7],
        ],
        [
          [p[0][1][3], p[0][1][1], p[0][1][2], p[0][1][0]],
          [p[1][0][3], p[1][0][1], p[1][0][2], p[1][0][0]],
          p[1][2],
          p[1][3],
          [p[0][5][3], p[0][5][1], p[0][5][2], p[0][5][0]],
          [p[1][4][3], p[1][4][1], p[1][4][2], p[1][4][0]],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    Ix_prime: function (p) {
      return [
        [
          p[0][0],
          [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
          [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
          p[0][3],
          p[0][4],
          [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
          [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
          p[0][7],
        ],
        [
          [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
          p[1][1],
          p[1][2],
          [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
          [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
          p[1][5],
          p[1][6],
          [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
        ],
      ];
    },
    Iy_prime: function (p) {
      return [
        [
          p[0][0],
          [p[1][0][2], p[1][0][1], p[1][0][0], p[1][0][3]],
          [p[0][1][2], p[0][1][1], p[0][1][0], p[0][1][3]],
          p[0][3],
          p[0][4],
          [p[1][4][2], p[1][4][1], p[1][4][0], p[1][4][3]],
          [p[0][5][2], p[0][5][1], p[0][5][0], p[0][5][3]],
          p[0][7],
        ],
        [
          [p[1][3][2], p[1][3][1], p[1][3][0], p[1][3][3]],
          p[1][1],
          p[1][2],
          [p[0][2][2], p[0][2][1], p[0][2][0], p[0][2][3]],
          [p[1][7][2], p[1][7][1], p[1][7][0], p[1][7][3]],
          p[1][5],
          p[1][6],
          [p[0][6][2], p[0][6][1], p[0][6][0], p[0][6][3]],
        ],
      ];
    },
    Iz_prime: function (p) {
      return [
        [
          p[0][0],
          [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
          [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]],
          p[0][3],
          p[0][4],
          [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
          [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
          p[0][7],
        ],
        [
          [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
          p[1][1],
          p[1][2],
          [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
          [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
          p[1][5],
          p[1][6],
          [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]],
        ],
      ];
    },
    Ox_prime: function (p) {
      return [
        [
          [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
          p[0][1],
          p[0][2],
          [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
          [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
          p[0][5],
          p[0][6],
          [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
        ],
        [
          p[1][0],
          [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
          [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
          p[1][3],
          p[1][4],
          [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
          [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
          p[1][7],
        ],
      ];
    },
    Oy_prime: function (p) {
      return [
        [
          [p[1][1][2], p[1][1][1], p[1][1][0], p[1][1][3]],
          p[0][1],
          p[0][2],
          [p[0][0][2], p[0][0][1], p[0][0][0], p[0][0][3]],
          [p[1][5][2], p[1][5][1], p[1][5][0], p[1][5][3]],
          p[0][5],
          p[0][6],
          [p[0][4][2], p[0][4][1], p[0][4][0], p[0][4][3]],
        ],
        [
          p[1][0],
          [p[1][2][2], p[1][2][1], p[1][2][0], p[1][2][3]],
          [p[0][3][2], p[0][3][1], p[0][3][0], p[0][3][3]],
          p[1][3],
          p[1][4],
          [p[1][6][2], p[1][6][1], p[1][6][0], p[1][6][3]],
          [p[0][7][2], p[0][7][1], p[0][7][0], p[0][7][3]],
          p[1][7],
        ],
      ];
    },
    Oz_prime: function (p) {
      return [
        [
          [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
          p[0][1],
          p[0][2],
          [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
          [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
          p[0][5],
          p[0][6],
          [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]],
        ],
        [
          p[1][0],
          [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
          [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]],
          p[1][3],
          p[1][4],
          [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
          [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
          p[1][7],
        ],
      ];
    },
    gyro_x: function (p) {
      return [
        [
          [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
          [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
          [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
          [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
          [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
          [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
          [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
          [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
        ],
        [
          [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
          [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
          [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
          [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
          [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
          [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
          [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
          [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
        ],
      ];
    },
    gyro_x_prime: function (p) {
      return [
        [
          [p[0][4][0], p[0][4][2], p[0][4][1], p[0][4][3]],
          [p[0][5][0], p[0][5][2], p[0][5][1], p[0][5][3]],
          [p[0][1][0], p[0][1][2], p[0][1][1], p[0][1][3]],
          [p[0][0][0], p[0][0][2], p[0][0][1], p[0][0][3]],
          [p[0][7][0], p[0][7][2], p[0][7][1], p[0][7][3]],
          [p[0][6][0], p[0][6][2], p[0][6][1], p[0][6][3]],
          [p[0][2][0], p[0][2][2], p[0][2][1], p[0][2][3]],
          [p[0][3][0], p[0][3][2], p[0][3][1], p[0][3][3]],
        ],
        [
          [p[1][4][0], p[1][4][2], p[1][4][1], p[1][4][3]],
          [p[1][5][0], p[1][5][2], p[1][5][1], p[1][5][3]],
          [p[1][1][0], p[1][1][2], p[1][1][1], p[1][1][3]],
          [p[1][0][0], p[1][0][2], p[1][0][1], p[1][0][3]],
          [p[1][7][0], p[1][7][2], p[1][7][1], p[1][7][3]],
          [p[1][6][0], p[1][6][2], p[1][6][1], p[1][6][3]],
          [p[1][2][0], p[1][2][2], p[1][2][1], p[1][2][3]],
          [p[1][3][0], p[1][3][2], p[1][3][1], p[1][3][3]],
        ],
      ];
    },
    gyro_y: function (p) {
      return [
        [
          [p[0][3][2], p[0][3][1], p[0][3][0], p[0][3][3]],
          [p[0][2][2], p[0][2][1], p[0][2][0], p[0][2][3]],
          [p[1][3][2], p[1][3][1], p[1][3][0], p[1][3][3]],
          [p[1][2][2], p[1][2][1], p[1][2][0], p[1][2][3]],
          [p[0][7][2], p[0][7][1], p[0][7][0], p[0][7][3]],
          [p[0][6][2], p[0][6][1], p[0][6][0], p[0][6][3]],
          [p[1][7][2], p[1][7][1], p[1][7][0], p[1][7][3]],
          [p[1][6][2], p[1][6][1], p[1][6][0], p[1][6][3]],
        ],
        [
          [p[0][1][2], p[0][1][1], p[0][1][0], p[0][1][3]],
          [p[0][0][2], p[0][0][1], p[0][0][0], p[0][0][3]],
          [p[1][1][2], p[1][1][1], p[1][1][0], p[1][1][3]],
          [p[1][0][2], p[1][0][1], p[1][0][0], p[1][0][3]],
          [p[0][5][2], p[0][5][1], p[0][5][0], p[0][5][3]],
          [p[0][4][2], p[0][4][1], p[0][4][0], p[0][4][3]],
          [p[1][5][2], p[1][5][1], p[1][5][0], p[1][5][3]],
          [p[1][4][2], p[1][4][1], p[1][4][0], p[1][4][3]],
        ],
      ];
    },
    gyro_y_prime: function (p) {
      return [
        [
          [p[1][1][2], p[1][1][1], p[1][1][0], p[1][1][3]],
          [p[1][0][2], p[1][0][1], p[1][0][0], p[1][0][3]],
          [p[0][1][2], p[0][1][1], p[0][1][0], p[0][1][3]],
          [p[0][0][2], p[0][0][1], p[0][0][0], p[0][0][3]],
          [p[1][5][2], p[1][5][1], p[1][5][0], p[1][5][3]],
          [p[1][4][2], p[1][4][1], p[1][4][0], p[1][4][3]],
          [p[0][5][2], p[0][5][1], p[0][5][0], p[0][5][3]],
          [p[0][4][2], p[0][4][1], p[0][4][0], p[0][4][3]],
        ],
        [
          [p[1][3][2], p[1][3][1], p[1][3][0], p[1][3][3]],
          [p[1][2][2], p[1][2][1], p[1][2][0], p[1][2][3]],
          [p[0][3][2], p[0][3][1], p[0][3][0], p[0][3][3]],
          [p[0][2][2], p[0][2][1], p[0][2][0], p[0][2][3]],
          [p[1][7][2], p[1][7][1], p[1][7][0], p[1][7][3]],
          [p[1][6][2], p[1][6][1], p[1][6][0], p[1][6][3]],
          [p[0][7][2], p[0][7][1], p[0][7][0], p[0][7][3]],
          [p[0][6][2], p[0][6][1], p[0][6][0], p[0][6][3]],
        ],
      ];
    },
    gyro_z: function (p) {
      return [
        [
          [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
          [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
          [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]],
          [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
          [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
          [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
          [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
          [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]],
        ],
        [
          [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
          [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
          [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]],
          [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
          [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
          [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
          [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
          [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]],
        ],
      ];
    },
    gyro_z_prime: function (p) {
      return [
        [
          [p[1][1][1], p[1][1][0], p[1][1][2], p[1][1][3]],
          [p[1][0][1], p[1][0][0], p[1][0][2], p[1][0][3]],
          [p[1][3][1], p[1][3][0], p[1][3][2], p[1][3][3]],
          [p[1][2][1], p[1][2][0], p[1][2][2], p[1][2][3]],
          [p[0][0][1], p[0][0][0], p[0][0][2], p[0][0][3]],
          [p[0][1][1], p[0][1][0], p[0][1][2], p[0][1][3]],
          [p[0][2][1], p[0][2][0], p[0][2][2], p[0][2][3]],
          [p[0][3][1], p[0][3][0], p[0][3][2], p[0][3][3]],
        ],
        [
          [p[1][4][1], p[1][4][0], p[1][4][2], p[1][4][3]],
          [p[1][5][1], p[1][5][0], p[1][5][2], p[1][5][3]],
          [p[1][6][1], p[1][6][0], p[1][6][2], p[1][6][3]],
          [p[1][7][1], p[1][7][0], p[1][7][2], p[1][7][3]],
          [p[0][5][1], p[0][5][0], p[0][5][2], p[0][5][3]],
          [p[0][4][1], p[0][4][0], p[0][4][2], p[0][4][3]],
          [p[0][7][1], p[0][7][0], p[0][7][2], p[0][7][3]],
          [p[0][6][1], p[0][6][0], p[0][6][2], p[0][6][3]],
        ],
      ];
    },
    Uy2: function (p) {
      return [
        [
          p[1][2],
          p[1][3],
          p[1][0],
          p[1][1],
          p[0][4],
          p[0][5],
          p[0][6],
          p[0][7],
        ],
        [
          p[0][2],
          p[0][3],
          p[0][0],
          p[0][1],
          p[1][4],
          p[1][5],
          p[1][6],
          p[1][7],
        ],
      ];
    },
    Dy2: function (p) {
      return [
        [
          p[0][0],
          p[0][1],
          p[0][2],
          p[0][3],
          p[1][6],
          p[1][7],
          p[1][4],
          p[1][5],
        ],
        [
          p[1][0],
          p[1][1],
          p[1][2],
          p[1][3],
          p[0][6],
          p[0][7],
          p[0][4],
          p[0][5],
        ],
      ];
    },
    LRx: function (c) {
      return [
        [c[3][0], c[3][2], c[3][1], c[3][3]],
        [c[2][0], c[2][2], c[2][1], c[2][3]],
        [c[6][0], c[6][2], c[6][1], c[6][3]],
        [c[7][0], c[7][2], c[7][1], c[7][3]],
        [c[0][0], c[0][2], c[0][1], c[0][3]],
        [c[1][0], c[1][2], c[1][1], c[1][3]],
        [c[5][0], c[5][2], c[5][1], c[5][3]],
        [c[4][0], c[4][2], c[4][1], c[4][3]],
      ];
    },
    LRy: function (c) {
      return [
        [c[3][0], c[3][1], c[3][3], c[3][2]],
        [c[0][0], c[0][1], c[0][3], c[0][2]],
        [c[1][0], c[1][1], c[1][3], c[1][2]],
        [c[2][0], c[2][1], c[2][3], c[2][2]],
        [c[7][0], c[7][1], c[7][3], c[7][2]],
        [c[4][0], c[4][1], c[4][3], c[4][2]],
        [c[5][0], c[5][1], c[5][3], c[5][2]],
        [c[6][0], c[6][1], c[6][3], c[6][2]],
      ];
    },
    LRz: function (c) {
      return [
        [c[4][0], c[4][3], c[4][2], c[4][1]],
        [c[0][0], c[0][3], c[0][2], c[0][1]],
        [c[3][0], c[3][3], c[3][2], c[3][1]],
        [c[7][0], c[7][3], c[7][2], c[7][1]],
        [c[5][0], c[5][3], c[5][2], c[5][1]],
        [c[1][0], c[1][3], c[1][2], c[1][1]],
        [c[2][0], c[2][3], c[2][2], c[2][1]],
        [c[6][0], c[6][3], c[6][2], c[6][1]],
      ];
    },
    hashtag: function (p) {
      return [
        [
          [p[1][3][3], p[1][3][2], p[1][3][1], p[1][3][0]],
          [p[0][2][3], p[0][2][2], p[0][2][1], p[0][2][0]],
          [p[0][1][3], p[0][1][2], p[0][1][1], p[0][1][0]],
          [p[1][0][3], p[1][0][2], p[1][0][1], p[1][0][0]],
          [p[0][5][3], p[0][5][2], p[0][5][1], p[0][5][0]],
          [p[1][4][3], p[1][4][2], p[1][4][1], p[1][4][0]],
          [p[1][7][3], p[1][7][2], p[1][7][1], p[1][7][0]],
          [p[0][6][3], p[0][6][2], p[0][6][1], p[0][6][0]],
        ],
        [
          [p[0][3][3], p[0][3][2], p[0][3][1], p[0][3][0]],
          [p[1][2][3], p[1][2][2], p[1][2][1], p[1][2][0]],
          [p[1][1][3], p[1][1][2], p[1][1][1], p[1][1][0]],
          [p[0][0][3], p[0][0][2], p[0][0][1], p[0][0][0]],
          [p[1][5][3], p[1][5][2], p[1][5][1], p[1][5][0]],
          [p[0][4][3], p[0][4][2], p[0][4][1], p[0][4][0]],
          [p[0][7][3], p[0][7][2], p[0][7][1], p[0][7][0]],
          [p[1][6][3], p[1][6][2], p[1][6][1], p[1][6][0]],
        ],
      ];
    },
  },
  controls: [
    {
      text: "do stuff",
      onClick: () => {
        this.puzzleState = m.Lx(this.puzzleState);
      },
    },
  ],
  handleKeydown: function (e) {
    const m = this.move;
    switch (e.code) {
      case this.keys[0]:
        this.puzzleState = m.Lx(this.puzzleState);
        break;
      case this.keys[1]:
        this.puzzleState = m.Lx_prime(this.puzzleState);
        break;
      case this.keys[2]:
        this.puzzleState = m.Ly(this.puzzleState);
        break;
      case this.keys[3]:
        this.puzzleState = m.Ly_prime(this.puzzleState);
        break;
      case this.keys[4]:
        this.puzzleState = m.Lz(this.puzzleState);
        break;
      case this.keys[5]:
        this.puzzleState = m.Lz_prime(this.puzzleState);
        break;
      case this.keys[6]:
        this.puzzleState = m.Rx(this.puzzleState);
        break;
      case this.keys[7]:
        this.puzzleState = m.Rx_prime(this.puzzleState);
        break;
      case this.keys[8]:
        this.puzzleState = m.Ry(this.puzzleState);
        break;
      case this.keys[9]:
        this.puzzleState = m.Ry_prime(this.puzzleState);
        break;
      case this.keys[10]:
        this.puzzleState = m.Rz(this.puzzleState);
        break;
      case this.keys[11]:
        this.puzzleState = m.Rz_prime(this.puzzleState);
        break;
      case this.keys[12]:
        this.puzzleState = m.Uy2(this.puzzleState);
        break;
      case this.keys[13]:
        this.puzzleState = m.Dy2(this.puzzleState);
        break;
      case this.keys[14]:
        this.puzzleState = m.Ix(this.puzzleState);
        break;
      case this.keys[15]:
        this.puzzleState = m.Ix(this.puzzleState);
        break;
      case this.keys[16]:
        this.puzzleState = m.Ix_prime(this.puzzleState);
        break;
      case this.keys[17]:
        this.puzzleState = m.Ix_prime(this.puzzleState);
        break;
      case this.keys[18]:
        this.puzzleState = m.gyro_z(this.puzzleState);
        break;
      case this.keys[19]:
        this.puzzleState = m.gyro_z_prime(this.puzzleState);
        break;
    }
    this.permuteCube(this.puzzleState);
  },
  handleKeyup: function (_e) {},
  permuteCube: function (p) {
    let orderedtris = [
      p[0][0][3],
      p[0][3][3],
      p[0][4][3],
      p[0][7][3],
      p[0][0][0],
      p[0][3][0],
      p[0][7][0],
      p[0][4][0],
      p[0][3][2],
      p[0][2][2],
      p[0][7][2],
      p[0][6][2],
      p[0][3][0],
      p[0][2][0],
      p[0][6][0],
      p[0][7][0],
      p[0][7][1],
      p[0][6][1],
      p[0][4][1],
      p[0][5][1],
      p[0][7][0],
      p[0][6][0],
      p[0][5][0],
      p[0][4][0],
      p[0][1][2],
      p[0][0][2],
      p[0][5][2],
      p[0][4][2],
      p[0][1][0],
      p[0][0][0],
      p[0][4][0],
      p[0][5][0],
      p[0][0][1],
      p[0][1][1],
      p[0][3][1],
      p[0][2][1],
      p[0][0][0],
      p[0][1][0],
      p[0][2][0],
      p[0][3][0],
      p[0][2][3],
      p[0][1][3],
      p[0][6][3],
      p[0][5][3],
      p[0][2][0],
      p[0][1][0],
      p[0][5][0],
      p[0][6][0],
      p[1][1][2],
      p[1][0][2],
      p[1][5][2],
      p[1][4][2],
      p[1][1][0],
      p[1][0][0],
      p[1][4][0],
      p[1][5][0],
      p[1][3][2],
      p[1][2][2],
      p[1][7][2],
      p[1][6][2],
      p[1][3][0],
      p[1][2][0],
      p[1][6][0],
      p[1][7][0],
      p[1][7][1],
      p[1][6][1],
      p[1][4][1],
      p[1][5][1],
      p[1][7][0],
      p[1][6][0],
      p[1][5][0],
      p[1][4][0],
      p[1][2][3],
      p[1][1][3],
      p[1][6][3],
      p[1][5][3],
      p[1][2][0],
      p[1][1][0],
      p[1][5][0],
      p[1][6][0],
      p[1][0][3],
      p[1][3][3],
      p[1][4][3],
      p[1][7][3],
      p[1][0][0],
      p[1][3][0],
      p[1][7][0],
      p[1][4][0],
      p[1][0][1],
      p[1][1][1],
      p[1][3][1],
      p[1][2][1],
      p[1][0][0],
      p[1][1][0],
      p[1][2][0],
      p[1][3][0],
    ]; /* LR UD FB IO */

    for (let i = 0; i < orderedtris.length; i++) {
      let tri = document.getElementById(`tri${i}`);
      tri.setAttribute("fill", this.colors[orderedtris[i]]);
    }
  },
  reset: function () {
    for (let i = 0; i <= 95; i++) {
      let tri = document.getElementById(`tri${i}`);
      tri.setAttribute("stroke", "black");
      tri.setAttribute("stroke-linecap", "round");
      tri.setAttribute("stroke-linejoin", "round");
    }
    this.puzzleState = [
      [
        [0, 7, 2, 5],
        [0, 7, 2, 4],
        [0, 7, 3, 4],
        [0, 7, 3, 5],
        [0, 6, 2, 5],
        [0, 6, 2, 4],
        [0, 6, 3, 4],
        [0, 6, 3, 5],
      ],
      [
        [1, 7, 2, 4],
        [1, 7, 2, 5],
        [1, 7, 3, 5],
        [1, 7, 3, 4],
        [1, 6, 2, 4],
        [1, 6, 2, 5],
        [1, 6, 3, 5],
        [1, 6, 3, 4],
      ],
    ];
    this.permuteCube(this.puzzleState);
  },
  resetHighlights: function () {
    for (let i = 0; i < 96; i++) {
      let tri = document.getElementById(`tri${i}`);
      tri.setAttribute("stroke-width", "0.33");
      let parent = tri.parentNode;
      parent.insertBefore(tri, parent.firstChild);
    }
  },
  getPermutation: function () {
    let perm = [];
    for (let i = 0; i < 96; i++) {
      let polygon = document.getElementById(`tri${i}`);
      perm.push(polygon.getAttribute("fill"));
    }
    return perm;
  },
  updateHighlights: function (oldPerm) {
    const newPerm = this.getPermutation();
    for (let i = 0; i < this.cubies.length; i++) {
      const cubie = this.cubies[i];
      let changed = false;
      for (let j = 0; j < cubie.length; j++) {
        if (oldPerm[cubie[j]] !== newPerm[cubie[j]]) {
          changed = true;
          break;
        }
      }
      if (changed) {
        for (let k = 0; k < cubie.length; k++) {
          let tri = document.getElementById(`tri${cubie[k]}`);
          tri.setAttribute("stroke-width", "1.75");
          let parent = tri.parentNode;
          parent.appendChild(tri);
        }
      }
    }
  },
  LorRTurn: function (p, num) {
    const m = this.move;
    if (num == 0) {
      return m.LRy(p);
    } else if (num == 1) {
      return m.LRy(m.LRy(m.LRy(p)));
    } else if (num == 2) {
      return m.LRy(m.LRy(p));
    } else if (num == 3) {
      return m.LRx(m.LRx(p));
    } else if (num == 4) {
      return m.LRz(m.LRz(p));
    } else if (num == 5) {
      return m.LRy(m.LRx(m.LRx(p)));
    } else if (num == 6) {
      return m.LRy(m.LRy(m.LRy(m.LRx(m.LRx(p)))));
    } else if (num == 7) {
      return m.LRx(p);
    } else if (num == 8) {
      return m.LRy(m.LRx(p));
    } else if (num == 9) {
      return m.LRy(m.LRy(m.LRy(m.LRx(p))));
    } else if (num == 10) {
      return m.LRy(m.LRy(m.LRx(p)));
    } else if (num == 11) {
      return m.LRx(m.LRx(m.LRx(p)));
    } else if (num == 12) {
      return m.LRy(m.LRx(m.LRx(m.LRx(p))));
    } else if (num == 13) {
      return m.LRy(m.LRy(m.LRy(m.LRx(m.LRx(m.LRx(p))))));
    } else if (num == 14) {
      return m.LRy(m.LRy(m.LRx(m.LRx(m.LRx(p)))));
    } else if (num == 15) {
      return m.LRz(p);
    } else if (num == 16) {
      return m.LRy(m.LRz(p));
    } else if (num == 17) {
      return m.LRy(m.LRy(m.LRy(m.LRz(p))));
    } else if (num == 18) {
      return m.LRy(m.LRy(m.LRz(p)));
    } else if (num == 19) {
      return m.LRz(m.LRz(m.LRz(p)));
    } else if (num == 20) {
      return m.LRy(m.LRz(m.LRz(m.LRz(p))));
    } else if (num == 21) {
      return m.LRy(m.LRy(m.LRy(m.LRz(m.LRz(m.LRz(p))))));
    } else if (num == 22) {
      return m.LRy(m.LRy(m.LRz(m.LRz(m.LRz(p)))));
    } else {
      return p;
    }
  },
  randomize: function () {
    /* Generates a random scramble sequence and draws the resulting 4D Rubik's cube, based on the scrambling algorithm from https://2x2x2x2scrambler.github.io/ */
    const physmoves = [
      "y",
      "y'",
      "y2",
      "x2",
      "z2",
      "x2,y",
      "x2,y'",
      "x",
      "x,y",
      "x,y'",
      "x,y2",
      "x'",
      "x',y",
      "x',y'",
      "x',y2",
      "z",
      "z,y",
      "z,y'",
      "z,y2",
      "z'",
      "z',y",
      "z',y'",
      "z',y2",
      "",
    ];
    const scrambleLength = [16, 14, 12];
    let str = "<br>Scramble Notation: ";
    let scrambleLen = scrambleLength[Math.floor(Math.random() * 3)];
    for (let i = 0; i < scrambleLen; i++) {
      let Lrand = Math.floor(Math.random() * 24);
      this.puzzleState[0] = this.LorRTurn(this.puzzleState[0], Lrand);
      let Rrand = Math.floor(Math.random() * 24);
      this.puzzleState[1] = this.LorRTurn(this.puzzleState[1], Rrand);
      this.puzzleState = this.move.hashtag(this.puzzleState);
      let Lrandstr = "";
      let Rrandstr = "";
      if (Lrand !== 24) {
        Lrandstr = "L" + physmoves[Lrand] + " ";
      }
      if (Rrand !== 24) {
        Rrandstr = "R" + physmoves[Rrand] + " ";
      }
      str += Lrandstr + Rrandstr + "# ";
    }
    str.replace("# # ", "");
    document.getElementById("scramblenotation").innerHTML = str;
    this.permuteCube(this.puzzleState);
  },
};
